% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tree-functions.R
\name{curve.V.star.forest}
\alias{curve.V.star.forest}
\alias{curve.V.star.forest.naive}
\alias{curve.V.star.forest.fast}
\title{Compute a curve of post hoc bounds based on a reference family with forest structure}
\usage{
curve.V.star.forest.naive(
  perm,
  C,
  ZL,
  leaf_list,
  pruning = FALSE,
  delete.gaps = FALSE
)

curve.V.star.forest.fast(
  perm,
  C,
  ZL,
  leaf_list,
  pruning = FALSE,
  is.pruned = FALSE,
  is.complete = FALSE,
  delete.gaps = FALSE
)
}
\arguments{
\item{perm}{An integer vector of elements in \code{1:m}, all different, and of size up to \code{m} (in which case it's a permutation, hence the name).
The set \eqn{S_t} is represented by \code{perm[1:t]}.}

\item{C}{A list of list representing the forest structure. See \code{\link[=V.star]{V.star()}} for more information.}

\item{ZL}{A list of integer vectors representing the upper bounds \eqn{\zeta_k} of the forest structure. See \code{\link[=V.star]{V.star()}} for more information.}

\item{leaf_list}{A list of vectors representing the atoms of the forest structure. See \code{\link[=V.star]{V.star()}} for more information.}

\item{pruning}{A boolean, \code{FALSE} by default. Whether to prune the forest (see \code{\link[=pruning]{pruning()}}) before computing the bounds. Ignored if \code{is.pruned} is \code{TRUE}.}

\item{delete.gaps}{A boolean, \code{FALSE} by default. If \code{TRUE}, will also delete the gaps in the structure induced
by the pruning, see \code{\link[=delete.gaps]{delete.gaps()}}. Ignored if \code{pruning} is \code{FALSE}.}

\item{is.pruned}{A boolean, \code{FALSE} by default. If \code{TRUE}, assumes that the forest structure has already been completed (see \code{\link[=forest.completion]{forest.completion()}}) and then pruned (see \code{\link[=pruning]{pruning()}})
and so skips the completion step and optional pruning step. Must be set to \code{TRUE} if giving a pruned forest, see Details.}

\item{is.complete}{A boolean, \code{FALSE} by default. If \code{TRUE}, assumes that the forest structure has already been completed (see \code{\link[=forest.completion]{forest.completion()}}) and so skips the completion step.
Ignored if \code{is.pruned} is \code{TRUE}.}
}
\value{
A vector of length of same length as \code{perm}, where the \code{t}-th
element is \eqn{V^*(S_t)}.
}
\description{
Computes the post hoc upper bound \eqn{V^*(S_t)} on the number of false positives in a
given sequence of selection sets \eqn{S_t} of hypotheses, such that
\eqn{S_t\subset S_{t+1}} and \eqn{|S_t| = t},
using a reference family \eqn{(R_k, \zeta_k)} that possess the forest structure
(see References).
}
\details{
Two functions are available
\describe{
\item{\code{curve.V.star.forest.naive}}{Repeatedly calls \code{\link[=V.star]{V.star()}} on each \eqn{S_t}, which is not optimized and time-consuming, this should be used in practice.}
\item{\code{curve.V.star.forest.fast}}{A fast and optimized version that leverage the fact that\eqn{S_{t+1}} is the union of \eqn{S_t} and a single hypothesis index.
The algorithm needs to work on a complete forest, so this version first completes the forest (unless told that the forest has already been completed, see \code{\link[=forest.completion]{forest.completion()}}),
and the completion fails if the input is a pruned forest (see \code{\link[=pruning]{pruning()}}),
so if a pruned forest is given as input, it MUST be said with the \code{is.pruned} argument
so that the function skips completion (so the pruned forest given as input must also be complete).}
}
}
\examples{
m <- 20
C <- list(
  list(c(2, 5), c(8, 15), c(16, 19)),
  list(c(3, 5), c(8, 10), c(12, 15), c(16, 16), c(17, 19)),
  list(c(4, 5), c(8, 9), c(10, 10), c(12, 12), c(13, 15), c(17, 17), c(18, 19)),
  list(c(8, 8), c(9, 9), c(13, 13), c(14, 15), c(18, 18), c(19, 19))
)
ZL <- list(
  c(4, 8, 4),
  c(3, 3, 4, 1, 3),
  c(2, 2, 1, 1, 2, 1, 2),
  c(1, 1, 1, 2, 1, 1)
)
leaf_list <- as.list(1:m)
curve.V.star.forest.naive(1:m, C, ZL, leaf_list, pruning = FALSE)

curve.V.star.forest.naive(1:m, C, ZL, leaf_list, pruning = TRUE)

curve.V.star.forest.fast(1:m, C, ZL, leaf_list, pruning = FALSE)

curve.V.star.forest.fast(1:m, C, ZL, leaf_list, pruning = TRUE)
}
\references{
Durand, G., Blanchard, G., Neuvial, P., & Roquain, E. (2020). Post hoc false positive control for structured hypotheses. Scandinavian Journal of Statistics, 47(4), 1114-1148.

Durand G. (2025). A fast algorithm to compute a curve of confidence upper bounds for the False Discovery Proportion using a reference family with a forest structure. arXiv:2502.03849.
}
